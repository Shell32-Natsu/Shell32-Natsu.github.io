<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shell32</title>
  
  <subtitle>Life/Code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xiadong.info/"/>
  <updated>2020-05-01T04:19:39.971Z</updated>
  <id>http://blog.xiadong.info/</id>
  
  <author>
    <name>Shell32</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 1156. Swap For Longest Repeated Character Substring</title>
    <link href="http://blog.xiadong.info/2019/08/11/LeetCode-1156-Swap-For-Longest-Repeated-Character-Substring/"/>
    <id>http://blog.xiadong.info/2019/08/11/LeetCode-1156-Swap-For-Longest-Repeated-Character-Substring/</id>
    <published>2019-08-11T10:51:41.000Z</published>
    <updated>2020-05-01T04:19:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string <code>text</code>, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: text &#x3D; &quot;ababa&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: We can swap the first &#39;b&#39; with the last &#39;a&#39;, or the last &#39;b&#39; with the first &#39;a&#39;. Then, the longest repeated character substring is &quot;aaa&quot;, which its length is 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: text &#x3D; &quot;aaabaaa&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Swap &#39;b&#39; with the last &#39;a&#39; (or the first &#39;a&#39;), and we get longest repeated character substring &quot;aaaaaa&quot;, which its length is 6.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: text &#x3D; &quot;aaabbaaa&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: text &#x3D; &quot;aaaaa&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: No need to swap, longest repeated character substring is &quot;aaaaa&quot;, length is 5.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: text &#x3D; &quot;abcdef&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= text.length &lt;= 20000</code></li><li><code>text</code> consist of lowercase English characters only</li></ul><a id="more"></a><p>在可以swap一对字符位置的情况下查找最长的相同字符子串。用双指针来搜索这种子串，搜索过程中要注意可以跳过一个字符，记录下跳过的字符的位置，在遇到第二个需要跳过的字符或者字符串结尾的时候判断跳过的字符能不能被swap（也就是找到不在这个子串范围内的可以跟跳过字符swap构成同字符字符串的字符）。</p><p>先把每个字符的出现index记录下来，它自然是一个有序的序列，然后在每次查找时使用二分搜索搜索不在找到的子串的范围内的index，如果有那么就是可以swap的。</p><p>要注意的有三点：</p><ul><li>一个子串处理完毕后下一次查找应该从被跳过的字符开始而不是子串结尾，所以最坏情况下每个字符会被访问两次。</li><li>一个字符都没有跳过的情况，这种情况肯定是到达原字符串结尾了。</li><li>在遇到第二个要跳过的字符的时候，其实<code>p2-p1-1</code>已经必然是一个可行解了，在这种情况下，<code>[p1, p2)</code>之间是<code>p2-p1-1</code>个相同字符+<code>1</code>个不同字符，必然可以swap成一个<code>p2-p1-1</code>长度的同字符序列。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxRepOpt1</span><span class="params">(<span class="built_in">string</span> text)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            pos[text[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p2 &lt; text.length()) &#123;</span><br><span class="line">            p2 = p1;</span><br><span class="line">            <span class="keyword">int</span> skip = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> skip_pos = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (p2 &lt; text.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text[p2] != text[p1]) &#123;</span><br><span class="line">                    skip++;</span><br><span class="line">                    <span class="keyword">if</span> (skip &lt;= <span class="number">1</span>)</span><br><span class="line">                        skip_pos = p2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (skip &gt; <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p2++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, p2 - p1 - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (findPossible(p1, p2, pos[text[p1]])) &#123;</span><br><span class="line">                ans = max(ans, p2 - p1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (skip == <span class="number">0</span>) &#123;</span><br><span class="line">                ans = max(ans, p2 - p1);</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = skip_pos == <span class="number">-1</span> ? p2 : skip_pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">findPossible</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> _right = upper_bound(pos.begin(), pos.end(), right) - pos.begin();</span><br><span class="line">        <span class="keyword">int</span> _left = lower_bound(pos.begin(), pos.end(), left) - pos.begin();</span><br><span class="line">        <span class="keyword">return</span> _left &gt; <span class="number">0</span> || _right &lt; pos.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string &lt;code&gt;text&lt;/code&gt;, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: text &amp;#x3D; &amp;quot;ababa&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: We can swap the first &amp;#39;b&amp;#39; with the last &amp;#39;a&amp;#39;, or the last &amp;#39;b&amp;#39; with the first &amp;#39;a&amp;#39;. Then, the longest repeated character substring is &amp;quot;aaa&amp;quot;, which its length is 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: text &amp;#x3D; &amp;quot;aaabaaa&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Swap &amp;#39;b&amp;#39; with the last &amp;#39;a&amp;#39; (or the first &amp;#39;a&amp;#39;), and we get longest repeated character substring &amp;quot;aaaaaa&amp;quot;, which its length is 6.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: text &amp;#x3D; &amp;quot;aaabbaaa&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: text &amp;#x3D; &amp;quot;aaaaa&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: No need to swap, longest repeated character substring is &amp;quot;aaaaa&amp;quot;, length is 5.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 5:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: text &amp;#x3D; &amp;quot;abcdef&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= text.length &amp;lt;= 20000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; consist of lowercase English characters only&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="字符串" scheme="http://blog.xiadong.info/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="二分搜索" scheme="http://blog.xiadong.info/tags/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    
      <category term="双指针" scheme="http://blog.xiadong.info/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1155. Number of Dice Rolls With Target Sum</title>
    <link href="http://blog.xiadong.info/2019/08/11/LeetCode-1155-Number-of-Dice-Rolls-With-Target-Sum/"/>
    <id>http://blog.xiadong.info/2019/08/11/LeetCode-1155-Number-of-Dice-Rolls-With-Target-Sum/</id>
    <published>2019-08-11T10:37:18.000Z</published>
    <updated>2020-05-01T04:19:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>You have <code>d</code> dice, and each die has <code>f</code> faces numbered <code>1, 2, ..., f</code>.</p><p>Return the number of possible ways (out of <code>fd</code> total ways) <strong>modulo 10^9 + 7</strong> to roll the dice so the sum of the face up numbers equals <code>target</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: d &#x3D; 1, f &#x3D; 6, target &#x3D; 3</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">You throw one die with 6 faces.  There is only one way to get a sum of 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: d &#x3D; 2, f &#x3D; 6, target &#x3D; 7</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:</span><br><span class="line">1+6, 2+5, 3+4, 4+3, 5+2, 6+1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: d &#x3D; 2, f &#x3D; 5, target &#x3D; 10</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: d &#x3D; 1, f &#x3D; 2, target &#x3D; 3</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: </span><br><span class="line">You throw one die with 2 faces.  There is no way to get a sum of 3.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: d &#x3D; 30, f &#x3D; 30, target &#x3D; 500</span><br><span class="line">Output: 222616187</span><br><span class="line">Explanation: </span><br><span class="line">The answer must be returned modulo 10^9 + 7.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= d, f &lt;= 30</code></li><li><code>1 &lt;= target &lt;= 1000</code></li></ul><a id="more"></a><p>基本思路是使用动态规划，有<code>n</code>个骰子投出<code>m</code>点的可能数量为<code>sum(n-1个骰子投出m-1的数量, n-1个骰子投出m-2的数量,..., n-1个骰子投出m-f的数量)</code>。对于每一个<code>d</code>都要遍历一遍<code>f</code>个点，每一次遍历中要再遍历一次<code>d-1</code>时的<code>f</code>个点所以最佳时间复杂度应为<code>O(df^2)</code>，在我的实现中因为不知道<code>d-1</code>时的可能点数的起始位置所以实际遍历了所有<code>d*f</code>个可能，实际复杂度为<code>O(d^2f^2)</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> MOD = <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numRollsToTarget</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> f, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &gt; d * f)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;int&gt; dp1(d * f + 1, 0), dp2(d * f + 1, 0);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= f; i++) &#123;</span><br><span class="line">            dp1[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= d; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dp1.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp1[j] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= f; k++) &#123;</span><br><span class="line">                    dp2[k + j] += dp1[j] % MOD;</span><br><span class="line">                    dp2[k + j] %= MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(dp1, dp2);</span><br><span class="line">            dp2.assign(d * f + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp1[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You have &lt;code&gt;d&lt;/code&gt; dice, and each die has &lt;code&gt;f&lt;/code&gt; faces numbered &lt;code&gt;1, 2, ..., f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Return the number of possible ways (out of &lt;code&gt;fd&lt;/code&gt; total ways) &lt;strong&gt;modulo 10^9 + 7&lt;/strong&gt; to roll the dice so the sum of the face up numbers equals &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: d &amp;#x3D; 1, f &amp;#x3D; 6, target &amp;#x3D; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You throw one die with 6 faces.  There is only one way to get a sum of 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: d &amp;#x3D; 2, f &amp;#x3D; 6, target &amp;#x3D; 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1+6, 2+5, 3+4, 4+3, 5+2, 6+1.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: d &amp;#x3D; 2, f &amp;#x3D; 5, target &amp;#x3D; 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: d &amp;#x3D; 1, f &amp;#x3D; 2, target &amp;#x3D; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You throw one die with 2 faces.  There is no way to get a sum of 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 5:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: d &amp;#x3D; 30, f &amp;#x3D; 30, target &amp;#x3D; 500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 222616187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The answer must be returned modulo 10^9 + 7.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= d, f &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="动态规划" scheme="http://blog.xiadong.info/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Invoke Jenkins Jobs from BitBucket Server by Webhook</title>
    <link href="http://blog.xiadong.info/2019/05/19/Invoke-Jenkins-Jobs-from-BitBucket-by-Webhook/"/>
    <id>http://blog.xiadong.info/2019/05/19/Invoke-Jenkins-Jobs-from-BitBucket-by-Webhook/</id>
    <published>2019-05-19T13:28:30.000Z</published>
    <updated>2020-05-01T04:19:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>I just added unit tests and am planning to add functional test scripts to one of my project. What comes to your mind when you work on a project every day, already have had test scripts and there is a Jenkins server available? Right, automate it!</p><p>My compay uses BitBucket server. However, although there are several BitBucket server plugins <a href="https://marketplace.atlassian.com/search?product=bitbucket&amp;query=jenkins" target="_blank" rel="noopener">available</a>, all of them are not free (and they are even not cheap!). So far, I just want to invoke a Jenkins job when some events happen. Should we pay thousands of dollars for such a easy (relatively) use case? So I decide to find some free alternatives.</p><a id="more"></a><h1 id="webhook">Webhook</h1><p><a href="https://en.wikipedia.org/wiki/Webhook" target="_blank" rel="noopener">Webhook</a> is a very convenient feature. It’s very simple. Just send a HTTP request to a URL when an event occurs. Fortunately, BitBucket server support Webhook <a href="https://confluence.atlassian.com/bitbucket/manage-webhooks-735643732.html" target="_blank" rel="noopener">natively</a>, which means you don’t need to install a plugin.</p><p><img src="https://i.imgur.com/1aSNdLN.png" alt="Imgur"></p><p>It’s very easy to configure a Webhook. Just follow the documentations.</p><h1 id="jenkins">Jenkins</h1><p>You need two plug-ins on Jenkins:</p><h2 id="generic-webhook-trigger-plugin">Generic Webhook Trigger Plugin</h2><p>You need this plug-in to parse the payload in the POST body sent by BitBucket.</p><p>BitBucket will send a POST request to the URL you set. The information is a JSON object in the body. Jenkins cannot parse the JSON object in the body so we need this plug-in.</p><p><img src="https://i.imgur.com/SuT3V5I.png" alt=""></p><p>After intalling <em>Generic Webhook Trigger Plugin</em>, You should set the Webhook URL to <code>{JENKINS SERVER}/generic-webhook-trigger/invoke</code>.</p><p>For more information, see <a href="https://wiki.jenkins.io/display/JENKINS/Generic+Webhook+Trigger+Plugin" target="_blank" rel="noopener">here</a>.</p><h2 id="bitbucket-stash-notifier-plugin">Bitbucket (Stash) Notifier Plugin</h2><p>After a Jenkins job finishes, you definitely want to get a notification. Sure, you can choose to send an email to the author or the code reviewer of the pull request. But there is a better way. BitBucket can accept the build status by a REST API (well, another Webhook). This plug-in is used to send this request.</p><p><img src="https://i.imgur.com/uRbOz7b.png" alt=""></p><p>Note that this plug-in only supports username/password credentials but you can use <a href="https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html" target="_blank" rel="noopener">personal access token</a> to secure your password.</p><p>When a job finishes, a build status icon will show beside the commit message and pull request if there is one.</p><p><img src="https://i.imgur.com/TWXsFzV.png" alt=""></p><p><img src="https://i.imgur.com/adNJCz0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I just added unit tests and am planning to add functional test scripts to one of my project. What comes to your mind when you work on a project every day, already have had test scripts and there is a Jenkins server available? Right, automate it!&lt;/p&gt;
&lt;p&gt;My compay uses BitBucket server. However, although there are several BitBucket server plugins &lt;a href=&quot;https://marketplace.atlassian.com/search?product=bitbucket&amp;amp;query=jenkins&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;available&lt;/a&gt;, all of them are not free (and they are even not cheap!). So far, I just want to invoke a Jenkins job when some events happen. Should we pay thousands of dollars for such a easy (relatively) use case? So I decide to find some free alternatives.&lt;/p&gt;
    
    </summary>
    
      <category term="备忘" scheme="http://blog.xiadong.info/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="Jenkins" scheme="http://blog.xiadong.info/tags/Jenkins/"/>
    
      <category term="BitBucket" scheme="http://blog.xiadong.info/tags/BitBucket/"/>
    
      <category term="配置" scheme="http://blog.xiadong.info/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1035. Uncrossed Lines</title>
    <link href="http://blog.xiadong.info/2019/04/27/LeetCode-1035-Uncrossed-Lines/"/>
    <id>http://blog.xiadong.info/2019/04/27/LeetCode-1035-Uncrossed-Lines/</id>
    <published>2019-04-27T23:28:08.000Z</published>
    <updated>2020-05-01T04:19:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>We write the integers of <code>A</code> and <code>B</code> (in the order they are given) on two separate horizontal lines.</p><p>Now, we may draw a straight line connecting two numbers <code>A[i]</code> and <code>B[j]</code> as long as <code>A[i] == B[j]</code>, and the line we draw does not intersect any other connecting (non-horizontal) line.</p><p>Return the maximum number of connecting lines we can draw in this way.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/04/26/142.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: A &#x3D; [1,4,2], B &#x3D; [1,2,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: We can draw 2 uncrossed lines as in the diagram.</span><br><span class="line">We cannot draw 3 uncrossed lines, because the line from A[1]&#x3D;4 to B[2]&#x3D;4 will intersect the line from A[2]&#x3D;2 to B[1]&#x3D;2.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: A &#x3D; [2,5,1,2,5], B &#x3D; [10,5,2,1,5,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: A &#x3D; [1,3,7,1,7,5], B &#x3D; [1,9,2,5,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>1 &lt;= A.length &lt;= 500</code></li><li><code>1 &lt;= B.length &lt;= 500</code></li><li><code>1 &lt;= A[i], B[i] &lt;= 2000</code></li></ol><a id="more"></a><p>虽然题目看起来有点复杂，其实就是求最长公共子串的长度。连线互不交叉其实就是公共子串换了一种说法而已。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxUncrossedLines</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = A.size(), col = B.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(row + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col + <span class="number">1</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i - <span class="number">1</span>] == B[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[row][col];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We write the integers of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; (in the order they are given) on two separate horizontal lines.&lt;/p&gt;
&lt;p&gt;Now, we may draw a straight line connecting two numbers &lt;code&gt;A[i]&lt;/code&gt; and &lt;code&gt;B[j]&lt;/code&gt; as long as &lt;code&gt;A[i] == B[j]&lt;/code&gt;, and the line we draw does not intersect any other connecting (non-horizontal) line.&lt;/p&gt;
&lt;p&gt;Return the maximum number of connecting lines we can draw in this way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2019/04/26/142.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: A &amp;#x3D; [1,4,2], B &amp;#x3D; [1,2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: We can draw 2 uncrossed lines as in the diagram.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We cannot draw 3 uncrossed lines, because the line from A[1]&amp;#x3D;4 to B[2]&amp;#x3D;4 will intersect the line from A[2]&amp;#x3D;2 to B[1]&amp;#x3D;2.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: A &amp;#x3D; [2,5,1,2,5], B &amp;#x3D; [10,5,2,1,5,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: A &amp;#x3D; [1,3,7,1,7,5], B &amp;#x3D; [1,9,2,5,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= A.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= B.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= A[i], B[i] &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="动态规划" scheme="http://blog.xiadong.info/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="字符串" scheme="http://blog.xiadong.info/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1034. Coloring A Border</title>
    <link href="http://blog.xiadong.info/2019/04/27/LeetCode-1034-Coloring-A-Border/"/>
    <id>http://blog.xiadong.info/2019/04/27/LeetCode-1034-Coloring-A-Border/</id>
    <published>2019-04-27T23:25:17.000Z</published>
    <updated>2020-05-01T04:19:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>Given a 2-dimensional <code>grid</code> of integers, each value in the grid represents the color of the grid square at that location.</p><p>Two squares belong to the same <em>connected component</em> if and only if they have the same color and are next to each other in any of the 4 directions.</p><p>The <em>border</em> of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).</p><p>Given a square at location <code>(r0, c0)</code> in the grid and a <code>color</code>, color the border of the connected component of that square with the given <code>color</code>, and return the final <code>grid</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: grid &#x3D; [[1,1],[1,2]], r0 &#x3D; 0, c0 &#x3D; 0, color &#x3D; 3</span><br><span class="line">Output: [[3, 3], [3, 2]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: grid &#x3D; [[1,2,2],[2,3,2]], r0 &#x3D; 0, c0 &#x3D; 1, color &#x3D; 3</span><br><span class="line">Output: [[1, 3, 3], [2, 3, 3]]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: grid &#x3D; [[1,1,1],[1,1,1],[1,1,1]], r0 &#x3D; 1, c0 &#x3D; 1, color &#x3D; 2</span><br><span class="line">Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>1 &lt;= grid.length &lt;= 50</code></li><li><code>1 &lt;= grid[0].length &lt;= 50</code></li><li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li><li><code>0 &lt;= r0 &lt; grid.length</code></li><li><code>0 &lt;= c0 &lt; grid[0].length</code></li><li><code>1 &lt;= color &lt;= 1000</code></li></ol><a id="more"></a><p>BFS搞就完事了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; nextStep = &#123;</span><br><span class="line">            &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">colorBorder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        row = grid.size(), col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">visited</span><span class="params">(row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, <span class="number">0</span>))</span></span>;</span><br><span class="line">        q.push(&#123;r0, c0&#125;);</span><br><span class="line">        visited[r0][c0] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; border;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">int</span> r = p.first, c = p.second;</span><br><span class="line">            <span class="keyword">if</span> (isBorder(grid, r, c))</span><br><span class="line">                border.emplace_back(r, c);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> next: nextStep) &#123;</span><br><span class="line">                <span class="keyword">int</span> tr = r + next[<span class="number">0</span>], tc = c + next[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (!isValid(grid, tr, tc) || grid[r][c] != grid[tr][tc] || </span><br><span class="line">                    visited[tr][tc])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                q.push(&#123;tr, tc&#125;);</span><br><span class="line">                visited[tr][tc] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : border) &#123;</span><br><span class="line">            grid[p.first][p.second] = color;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBorder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span> || c == <span class="number">0</span> || r == row - <span class="number">1</span> || c == col - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> next: nextStep) &#123;</span><br><span class="line">            <span class="keyword">int</span> tr = r + next[<span class="number">0</span>], tc = c + next[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!isValid(grid, tr, tc))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (grid[tr][tc] != grid[r][c])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r &gt;= <span class="number">0</span> &amp;&amp; c &gt;= <span class="number">0</span> &amp;&amp; r &lt; row &amp;&amp; c &lt; col;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a 2-dimensional &lt;code&gt;grid&lt;/code&gt; of integers, each value in the grid represents the color of the grid square at that location.&lt;/p&gt;
&lt;p&gt;Two squares belong to the same &lt;em&gt;connected component&lt;/em&gt; if and only if they have the same color and are next to each other in any of the 4 directions.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;border&lt;/em&gt; of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).&lt;/p&gt;
&lt;p&gt;Given a square at location &lt;code&gt;(r0, c0)&lt;/code&gt; in the grid and a &lt;code&gt;color&lt;/code&gt;, color the border of the connected component of that square with the given &lt;code&gt;color&lt;/code&gt;, and return the final &lt;code&gt;grid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: grid &amp;#x3D; [[1,1],[1,2]], r0 &amp;#x3D; 0, c0 &amp;#x3D; 0, color &amp;#x3D; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [[3, 3], [3, 2]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: grid &amp;#x3D; [[1,2,2],[2,3,2]], r0 &amp;#x3D; 0, c0 &amp;#x3D; 1, color &amp;#x3D; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [[1, 3, 3], [2, 3, 3]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: grid &amp;#x3D; [[1,1,1],[1,1,1],[1,1,1]], r0 &amp;#x3D; 1, c0 &amp;#x3D; 1, color &amp;#x3D; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid.length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid[0].length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= grid[i][j] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= r0 &amp;lt; grid.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= c0 &amp;lt; grid[0].length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= color &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="图" scheme="http://blog.xiadong.info/tags/%E5%9B%BE/"/>
    
      <category term="BFS" scheme="http://blog.xiadong.info/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1033. Moving Stones Until Consecutive</title>
    <link href="http://blog.xiadong.info/2019/04/27/LeetCode-1033-Moving-Stones-Until-Consecutive/"/>
    <id>http://blog.xiadong.info/2019/04/27/LeetCode-1033-Moving-Stones-Until-Consecutive/</id>
    <published>2019-04-27T23:12:43.000Z</published>
    <updated>2020-05-01T04:19:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>Three stones are on a number line at positions <code>a</code>, <code>b</code>, and <code>c</code>.</p><p>Each turn, let’s say the stones are currently at positions <code>x, y, z</code> with <code>x &lt; y &lt; z</code>.  You pick up the stone at either position <code>x</code> or position <code>z</code>, and move that stone to an integer position <code>k</code>, with <code>x &lt; k &lt; z</code> and <code>k != y</code>.</p><p>The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.</p><p>When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: <code>answer = [minimum_moves, maximum_moves]</code></p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: a &#x3D; 1, b &#x3D; 2, c &#x3D; 5</span><br><span class="line">Output: [1, 2]</span><br><span class="line">Explanation: Move stone from 5 to 4 then to 3, or we can move it directly to 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: a &#x3D; 4, b &#x3D; 3, c &#x3D; 2</span><br><span class="line">Output: [0, 0]</span><br><span class="line">Explanation: We cannot make any moves.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>1 &lt;= a &lt;= 100</code></li><li><code>1 &lt;= b &lt;= 100</code></li><li><code>1 &lt;= c &lt;= 100</code></li><li><code>a != b, b != c, c != a</code></li></ol><a id="more"></a><p>对于最大值，就是两端的石头以每次一格的速度往中间靠拢。每次一格，每个格子走一次。所以就是两端的石头之间的格子数（<code>stones[2] - stones[0] - 1</code>）再减掉中间的石头。</p><p>最小值有三种情况：</p><ol><li>已经相邻，最小步数为0.</li><li>任意两个石头之间只有一个格子，把另一个石头移过来就可以了，步数为1.</li><li>其他情况。先移动一个石头使其与另一个的石头差一格或相邻，再移动另一个石头。共2步。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">numMovesStones</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; stones = &#123;a, b, c&#125;;</span><br><span class="line">        sort(stones.begin(), stones.end());</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">        ans[<span class="number">1</span>] = stones[<span class="number">2</span>] - stones[<span class="number">0</span>] - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (stones[<span class="number">1</span>] - stones[<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; stones[<span class="number">2</span>] - stones[<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stones[<span class="number">1</span>] - stones[<span class="number">0</span>] == <span class="number">1</span> || stones[<span class="number">2</span>] - stones[<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stones[<span class="number">1</span>] - stones[<span class="number">0</span>] == <span class="number">2</span> ||</span><br><span class="line">                stones[<span class="number">2</span>] - stones[<span class="number">1</span>] == <span class="number">2</span>)</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Three stones are on a number line at positions &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each turn, let’s say the stones are currently at positions &lt;code&gt;x, y, z&lt;/code&gt; with &lt;code&gt;x &amp;lt; y &amp;lt; z&lt;/code&gt;.  You pick up the stone at either position &lt;code&gt;x&lt;/code&gt; or position &lt;code&gt;z&lt;/code&gt;, and move that stone to an integer position &lt;code&gt;k&lt;/code&gt;, with &lt;code&gt;x &amp;lt; k &amp;lt; z&lt;/code&gt; and &lt;code&gt;k != y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.&lt;/p&gt;
&lt;p&gt;When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: &lt;code&gt;answer = [minimum_moves, maximum_moves]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: a &amp;#x3D; 1, b &amp;#x3D; 2, c &amp;#x3D; 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [1, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Move stone from 5 to 4 then to 3, or we can move it directly to 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: a &amp;#x3D; 4, b &amp;#x3D; 3, c &amp;#x3D; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [0, 0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: We cannot make any moves.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= a &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= b &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= c &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a != b, b != c, c != a&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>微博图片外链临时解决</title>
    <link href="http://blog.xiadong.info/2019/04/27/%E5%BE%AE%E5%8D%9A%E5%9B%BE%E7%89%87%E5%A4%96%E9%93%BE%E4%B8%B4%E6%97%B6%E8%A7%A3%E5%86%B3/"/>
    <id>http://blog.xiadong.info/2019/04/27/微博图片外链临时解决/</id>
    <published>2019-04-27T22:28:12.000Z</published>
    <updated>2020-05-01T04:19:39.987Z</updated>
    
    <content type="html"><![CDATA[<p>最近微博给用户上传的图片增加了反盗链。鼓捣了一个小时终于把这个问题给搞定了。</p><a id="more"></a><h1 id="原因">原因</h1><p>微博的反盗链机制目前很简单，就是查<code>referer</code>这个<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer" target="_blank" rel="noopener">header</a>。但是如果请求中没有这个header，那么也是可以的。正好HTML的图片tag <code>img</code>有一个属性<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img" target="_blank" rel="noopener">referrerpolicy</a>，可以让浏览器不发送referer header。那么只要在博客图片里面加上这个属性就可以了。</p><p><strong>这个属性还属于experimental的阶段。</strong> iOS的Safari还不支持。不过FF和Chrome的较新版本都支持了。</p><p>盲猜一下为什么微博没有把没有referer的也给封杀了：也许有一些非WEB端也会请求图片吧。</p><h1 id="解决">解决</h1><h2 id="hexo-tag">Hexo <a href="https://hexo.io/api/tag" target="_blank" rel="noopener">Tag</a></h2><p>Hexo Tag 类似于一个自定义的可以在Markdown文件中调用的函数。它会在generate的时候运行把调用位置替换成函数的返回结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">'sinaimage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> image_url = args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;img src="<span class="subst">$&#123;image_url&#125;</span>" alt="" referrerpolicy="no-referrer"&gt;&lt;/img&gt;`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个函数很简单，没什么好说的。把它保存成一个<code>.js</code>文件然后放到hexo project目录下面的scripts目录里，没有就创建一个。</p><p>在Markdown中这样调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sinaimage https:&#x2F;&#x2F;wx4.sinaimg.cn&#x2F;large&#x2F;xxxxx.jpg %&#125;</span><br></pre></td></tr></table></figure><h2 id="替换以前文章中的图片">替换以前文章中的图片</h2><p>使用<code>sed</code>就可以批量替换掉以前文章中插入的图片了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -E &#39;s&#x2F;.*\!\[.*\]\((https?\:\&#x2F;\&#x2F;.*\.sinaimg\.cn.*)\)&#x2F;\&#123;% sinaimage \1 %\&#125;&#x2F;g&#39; &#39;FILE_PATH&#39;</span><br></pre></td></tr></table></figure><p>以上的正则请自行修改。<strong>注意做好备份。</strong></p><p>暂时就解决了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近微博给用户上传的图片增加了反盗链。鼓捣了一个小时终于把这个问题给搞定了。&lt;/p&gt;
    
    </summary>
    
      <category term="WEB" scheme="http://blog.xiadong.info/categories/WEB/"/>
    
    
      <category term="博客" scheme="http://blog.xiadong.info/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://blog.xiadong.info/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 839. Similar String Groups</title>
    <link href="http://blog.xiadong.info/2018/05/21/LeetCode-839-Similar-String-Groups/"/>
    <id>http://blog.xiadong.info/2018/05/21/LeetCode-839-Similar-String-Groups/</id>
    <published>2018-05-21T17:02:56.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>Two strings <code>X</code> and <code>Y</code> are similar if we can swap two letters (in different positions) of <code>X</code>, so that it equals <code>Y</code>.</p><p>For example, <code>&quot;tars&quot;</code> and <code>&quot;rats&quot;</code> are similar (swapping at positions <code>0</code> and <code>2</code>), and <code>&quot;rats&quot;</code> and <code>&quot;arts&quot;</code> are similar, but <code>&quot;star&quot;</code> is not similar to <code>&quot;tars&quot;</code>, <code>&quot;rats&quot;</code>, or <code>&quot;arts&quot;</code>.</p><p>Together, these form two connected groups by similarity: <code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> and <code>{&quot;star&quot;}</code>.  Notice that <code>&quot;tars&quot;</code> and <code>&quot;arts&quot;</code>are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p><p>We are given a list <code>A</code> of unique strings.  Every string in <code>A</code> is an anagram of every other string in <code>A</code>.  How many groups are there?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>A.length &lt;= 2000</code></li><li><code>A[i].length &lt;= 1000</code></li><li><code>A.length * A[i].length &lt;= 20000</code></li><li>All words in <code>A</code> consist of lowercase letters only.</li><li>All words in <code>A</code> have the same length and are anagrams of each other.</li><li>The judging time limit has been increased for this question.</li></ol> <a id="more"></a><p>一个分类问题，一下就想到用并查集来做，因为放宽了时间要求所以并不是很难。判断两个字符串是否相似比较简单，看能不能通过一次swap得到就行了。一开始每个字符串自己一个集合，然后对于每一个字符串，遍历所有已经分类过的字符串，如果有相似的，就把它们所在的集合合并。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; uf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSimilarGroups</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.size();</span><br><span class="line">        uf = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            uf[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uf[i] == uf[j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (similar(A[i], A[j])) &#123;</span><br><span class="line">                    merge(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (uf[i] == i)</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span> <span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h1 = head(n1), h2 = head(n2);</span><br><span class="line">        <span class="keyword">if</span> (h1 == h2)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        uf[h2] = h1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">head</span> <span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = n;</span><br><span class="line">        <span class="keyword">while</span> (uf[p] != p) &#123;</span><br><span class="line">            p = uf[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">similar</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i] != s2[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (++n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pos.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> p1 = pos[<span class="number">0</span>], p2 = pos[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s1[p1] == s2[p2] &amp;&amp; s1[p2] == s2[p1])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Two strings &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are similar if we can swap two letters (in different positions) of &lt;code&gt;X&lt;/code&gt;, so that it equals &lt;code&gt;Y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;&amp;quot;tars&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;rats&amp;quot;&lt;/code&gt; are similar (swapping at positions &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;), and &lt;code&gt;&amp;quot;rats&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;arts&amp;quot;&lt;/code&gt; are similar, but &lt;code&gt;&amp;quot;star&amp;quot;&lt;/code&gt; is not similar to &lt;code&gt;&amp;quot;tars&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;rats&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;arts&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Together, these form two connected groups by similarity: &lt;code&gt;{&amp;quot;tars&amp;quot;, &amp;quot;rats&amp;quot;, &amp;quot;arts&amp;quot;}&lt;/code&gt; and &lt;code&gt;{&amp;quot;star&amp;quot;}&lt;/code&gt;.  Notice that &lt;code&gt;&amp;quot;tars&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;arts&amp;quot;&lt;/code&gt;are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.&lt;/p&gt;
&lt;p&gt;We are given a list &lt;code&gt;A&lt;/code&gt; of unique strings.  Every string in &lt;code&gt;A&lt;/code&gt; is an anagram of every other string in &lt;code&gt;A&lt;/code&gt;.  How many groups are there?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [&amp;quot;tars&amp;quot;,&amp;quot;rats&amp;quot;,&amp;quot;arts&amp;quot;,&amp;quot;star&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;A.length &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A[i].length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A.length * A[i].length &amp;lt;= 20000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All words in &lt;code&gt;A&lt;/code&gt; consist of lowercase letters only.&lt;/li&gt;
&lt;li&gt;All words in &lt;code&gt;A&lt;/code&gt; have the same length and are anagrams of each other.&lt;/li&gt;
&lt;li&gt;The judging time limit has been increased for this question.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="字符串" scheme="http://blog.xiadong.info/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="并查集" scheme="http://blog.xiadong.info/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 838. Push Dominoes</title>
    <link href="http://blog.xiadong.info/2018/05/21/LeetCode-838-Push-Dominoes/"/>
    <id>http://blog.xiadong.info/2018/05/21/LeetCode-838-Push-Dominoes/</id>
    <published>2018-05-21T16:53:52.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>There are <code>N</code> dominoes in a line, and we place each domino vertically upright.</p><p>In the beginning, we simultaneously push some of the dominoes either to the left or to the right.</p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png" alt="img"></p><p>After each second, each domino that is falling to the left pushes the adjacent domino on the left.</p><p>Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.</p><p>When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.</p><p>For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.</p><p>Given a string “S” representing the initial state. <code>S[i] = 'L'</code>, if the i-th domino has been pushed to the left; <code>S[i] = 'R'</code>, if the i-th domino has been pushed to the right; <code>S[i] = '.'</code>, if the <code>i</code>-th domino has not been pushed.</p><p>Return a string representing the final state.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;.L.R...LR..L..&quot;</span><br><span class="line">Output: &quot;LL.RR.LLRRLL..&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;RR.L&quot;</span><br><span class="line">Output: &quot;RR.L&quot;</span><br><span class="line">Explanation: The first domino expends no additional force on the second domino.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>0 &lt;= N &lt;= 10^5</code></li><li>String <code>dominoes</code> contains only <code>'L</code>', <code>'R'</code> and <code>'.'</code></li></ol><a id="more"></a><p>这道题我使用双指针</p><ul><li>如果遇到<code>L</code>，那么就把之前的<code>.</code>设置成<code>L</code>。</li><li>如果遇到<code>R</code>，那么就往后搜索<code>L</code><ul><li>如果没有<code>L</code>了，那么就把后面的全部设置成<code>R</code></li><li>如果遇到了<code>R</code>，那么这两个<code>R</code>之间的<code>.</code>就全部设置成<code>R</code>，把新的<code>R</code>当成新的起点</li><li>如果遇到了<code>L</code>，那么就从两边的<code>R</code>和<code>L</code>向中间合拢，直到相遇</li></ul></li></ul><p>时间复杂度<code>O(n)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">pushDominoes</span><span class="params">(<span class="built_in">string</span> dominoes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p1 &lt; dominoes.length()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p1 &lt; dominoes.length() &amp;&amp; dominoes[p1] == <span class="string">'.'</span>)</span><br><span class="line">                p1++;</span><br><span class="line">            <span class="keyword">if</span> (dominoes[p1] == <span class="string">'L'</span>) &#123;</span><br><span class="line">                p2 = p1;</span><br><span class="line">                <span class="keyword">int</span> i = p1 - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; dominoes[i] == <span class="string">'.'</span>)</span><br><span class="line">                    dominoes[i--] = <span class="string">'L'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p2 = p1;</span><br><span class="line">                <span class="keyword">while</span> (p2 &lt; dominoes.length() &amp;&amp; dominoes[p2] != <span class="string">'L'</span>) &#123;</span><br><span class="line">                    p2++;</span><br><span class="line">                    <span class="keyword">if</span> (dominoes[p2] == <span class="string">'R'</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = p1; i &lt; p2; i++)</span><br><span class="line">                            dominoes[i] = <span class="string">'R'</span>;</span><br><span class="line">                        p1 = p2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p2 == dominoes.length()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (p2 = p1; p2 &lt; dominoes.length(); p2++)</span><br><span class="line">                        dominoes[p2] = <span class="string">'R'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (p2 - p1 + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                        dominoes[p1 + i] = <span class="string">'R'</span>;</span><br><span class="line">                        dominoes[p2 - i] = <span class="string">'L'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = p2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dominoes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are &lt;code&gt;N&lt;/code&gt; dominoes in a line, and we place each domino vertically upright.&lt;/p&gt;
&lt;p&gt;In the beginning, we simultaneously push some of the dominoes either to the left or to the right.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;After each second, each domino that is falling to the left pushes the adjacent domino on the left.&lt;/p&gt;
&lt;p&gt;Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.&lt;/p&gt;
&lt;p&gt;When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.&lt;/p&gt;
&lt;p&gt;For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.&lt;/p&gt;
&lt;p&gt;Given a string “S” representing the initial state. &lt;code&gt;S[i] = &#39;L&#39;&lt;/code&gt;, if the i-th domino has been pushed to the left; &lt;code&gt;S[i] = &#39;R&#39;&lt;/code&gt;, if the i-th domino has been pushed to the right; &lt;code&gt;S[i] = &#39;.&#39;&lt;/code&gt;, if the &lt;code&gt;i&lt;/code&gt;-th domino has not been pushed.&lt;/p&gt;
&lt;p&gt;Return a string representing the final state.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;.L.R...LR..L..&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;LL.RR.LLRRLL..&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;RR.L&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;RR.L&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The first domino expends no additional force on the second domino.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= N &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;String &lt;code&gt;dominoes&lt;/code&gt; contains only &lt;code&gt;&#39;L&lt;/code&gt;&#39;, &lt;code&gt;&#39;R&#39;&lt;/code&gt; and &lt;code&gt;&#39;.&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="字符串" scheme="http://blog.xiadong.info/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 837. New 21 Game</title>
    <link href="http://blog.xiadong.info/2018/05/21/LeetCode-837-New-21-Game/"/>
    <id>http://blog.xiadong.info/2018/05/21/LeetCode-837-New-21-Game/</id>
    <published>2018-05-21T16:44:32.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>Alice plays the following game, loosely based on the card game “21”.</p><p>Alice starts with <code>0</code> points, and draws numbers while she has less than <code>K</code> points.  During each draw, she gains an integer number of points randomly from the range <code>[1, W]</code>, where <code>W</code> is an integer.  Each draw is independent and the outcomes have equal probabilities.</p><p>Alice stops drawing numbers when she gets <code>K</code> or more points.  What is the probability that she has <code>N</code> or less points?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: N &#x3D; 10, K &#x3D; 1, W &#x3D; 10</span><br><span class="line">Output: 1.00000</span><br><span class="line">Explanation:  Alice gets a single card, then stops.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: N &#x3D; 6, K &#x3D; 1, W &#x3D; 10</span><br><span class="line">Output: 0.60000</span><br><span class="line">Explanation:  Alice gets a single card, then stops.</span><br><span class="line">In 6 out of W &#x3D; 10 possibilities, she is at or below N &#x3D; 6 points.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: N &#x3D; 21, K &#x3D; 17, W &#x3D; 10</span><br><span class="line">Output: 0.73278</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>0 &lt;= K &lt;= N &lt;= 10000</code></li><li><code>1 &lt;= W &lt;= 10000</code></li><li>Answers will be accepted as correct if they are within <code>10^-5</code> of the correct answer.</li><li>The judging time limit has been reduced for this question.</li></ol><a id="more"></a><p>这道题可以用DP+滑动窗口来解决。</p><p>最终获得N点的概率是<code>[N-W, N-1]</code>中每个点数出现的概率×<code>1/W</code>。所以<code>P(N)=P(N-1)-P(N-W-1)*1/W+P(N-1)*1/W</code>，这个步骤类似于把长度为W的窗口往前滑动一格。</p><p>要注意<code>&gt;=K</code>的点数要排除掉。最后要把<code>[K, N]</code>的所有概率加起来。</p><p>时间复杂度<code>O(n)</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">new21Game</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> K, <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> f = (<span class="number">1</span> / (<span class="keyword">double</span>)W);</span><br><span class="line">        dp[<span class="number">1</span>] = f;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">double</span> t = dp[j];</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= W) &#123;</span><br><span class="line">                t -= f;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                t -= (dp[j - W] * f);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; K)</span><br><span class="line">                t += dp[j] * f;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= W) &#123;</span><br><span class="line">                t += f;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = t;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = K; i &lt;= N; i++) &#123;</span><br><span class="line">            ans += dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Alice plays the following game, loosely based on the card game “21”.&lt;/p&gt;
&lt;p&gt;Alice starts with &lt;code&gt;0&lt;/code&gt; points, and draws numbers while she has less than &lt;code&gt;K&lt;/code&gt; points.  During each draw, she gains an integer number of points randomly from the range &lt;code&gt;[1, W]&lt;/code&gt;, where &lt;code&gt;W&lt;/code&gt; is an integer.  Each draw is independent and the outcomes have equal probabilities.&lt;/p&gt;
&lt;p&gt;Alice stops drawing numbers when she gets &lt;code&gt;K&lt;/code&gt; or more points.  What is the probability that she has &lt;code&gt;N&lt;/code&gt; or less points?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: N &amp;#x3D; 10, K &amp;#x3D; 1, W &amp;#x3D; 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1.00000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:  Alice gets a single card, then stops.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: N &amp;#x3D; 6, K &amp;#x3D; 1, W &amp;#x3D; 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 0.60000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:  Alice gets a single card, then stops.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In 6 out of W &amp;#x3D; 10 possibilities, she is at or below N &amp;#x3D; 6 points.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: N &amp;#x3D; 21, K &amp;#x3D; 17, W &amp;#x3D; 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 0.73278&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= K &amp;lt;= N &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= W &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Answers will be accepted as correct if they are within &lt;code&gt;10^-5&lt;/code&gt; of the correct answer.&lt;/li&gt;
&lt;li&gt;The judging time limit has been reduced for this question.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="动态规划" scheme="http://blog.xiadong.info/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 836. Rectangle Overlap</title>
    <link href="http://blog.xiadong.info/2018/05/21/LeetCode-836-Rectangle-Overlap/"/>
    <id>http://blog.xiadong.info/2018/05/21/LeetCode-836-Rectangle-Overlap/</id>
    <published>2018-05-21T16:37:10.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>A rectangle is represented as a list <code>[x1, y1, x2, y2]</code>, where <code>(x1, y1)</code> are the coordinates of its bottom-left corner, and <code>(x2, y2)</code> are the coordinates of its top-right corner.</p><p>Two rectangles overlap if the area of their intersection is positive.  To be clear, two rectangles that only touch at the corner or edges do not overlap.</p><p>Given two rectangles, return whether they overlap.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: rec1 &#x3D; [0,0,2,2], rec2 &#x3D; [1,1,3,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: rec1 &#x3D; [0,0,1,1], rec2 &#x3D; [1,0,2,1]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Notes:</strong></p><ol><li>Both rectangles <code>rec1</code> and <code>rec2</code> are lists of 4 integers.</li><li>All coordinates in rectangles will be between <code>-10^9</code>and<code>10^9</code>.</li></ol> <a id="more"></a><p>判断两个矩形是否有相交，反过来思考什么条件下两个矩形不相交比较简单。如果</p><ul><li>一个矩形的下边比另一个上边大，那么它们不相交</li><li>一个矩形的左边比另一个右边大，那么它们不相交</li></ul><p>反之它们相交。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isRectangleOverlap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rec1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rec2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((rec1[<span class="number">1</span>] &gt;= rec2[<span class="number">3</span>] || rec2[<span class="number">1</span>] &gt;= rec1[<span class="number">3</span>]) || (rec1[<span class="number">0</span>] &gt;= rec2[<span class="number">2</span>] || rec2[<span class="number">0</span>] &gt;= rec1[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A rectangle is represented as a list &lt;code&gt;[x1, y1, x2, y2]&lt;/code&gt;, where &lt;code&gt;(x1, y1)&lt;/code&gt; are the coordinates of its bottom-left corner, and &lt;code&gt;(x2, y2)&lt;/code&gt; are the coordinates of its top-right corner.&lt;/p&gt;
&lt;p&gt;Two rectangles overlap if the area of their intersection is positive.  To be clear, two rectangles that only touch at the corner or edges do not overlap.&lt;/p&gt;
&lt;p&gt;Given two rectangles, return whether they overlap.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: rec1 &amp;#x3D; [0,0,2,2], rec2 &amp;#x3D; [1,1,3,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: rec1 &amp;#x3D; [0,0,1,1], rec2 &amp;#x3D; [1,0,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Both rectangles &lt;code&gt;rec1&lt;/code&gt; and &lt;code&gt;rec2&lt;/code&gt; are lists of 4 integers.&lt;/li&gt;
&lt;li&gt;All coordinates in rectangles will be between &lt;code&gt;-10^9&lt;/code&gt;and&lt;code&gt;10^9&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>在CMU Solo OS是一种怎样的体验？</title>
    <link href="http://blog.xiadong.info/2018/05/17/%E5%9C%A8CMU-solo-OS%E6%98%AF%E4%B8%80%E7%A7%8D%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/"/>
    <id>http://blog.xiadong.info/2018/05/17/在CMU-solo-OS是一种怎样的体验/</id>
    <published>2018-05-17T19:54:48.000Z</published>
    <updated>2020-05-01T04:19:39.987Z</updated>
    
    <content type="html"><![CDATA[<p>我想很多CMU的同学在选课的时候都搜到过关于<a href="https://www.cs.cmu.edu/~410/" target="_blank" rel="noopener">15410/15605 Operating System Design and Implementation</a>这门课的传说，比如<a href="https://www.zhihu.com/question/28249230/answer/131257766" target="_blank" rel="noopener">这篇</a>，比如<a href="http://www.1point3acres.com/bbs/thread-198949-1-1.html" target="_blank" rel="noopener">这篇</a>。BTW，我是从前面那篇介绍知道的这门课。以前学长们的介绍都挺详细了，我在这里就是记录一下我这个学期上这门课的体会吧，有很多地方与前人的介绍会有重复，毕竟这门课应该好久没有改过了😑。</p><a id="more"></a><h1 id="为什么我要选这门课">为什么我要选这门课</h1><p>在我一年多前看了这门课的介绍之后，我就决定一定要选上这门课。最吸引我的地方就是它的P3，也就是实现kernel的那个project。作为一个程序员，大家都是听着K&amp;R写Unix，Linus写Linux的传说长大的（误），谁不想亲手写一个OS内核？毕竟是程序员三大浪漫之一。</p><p>另外一个原因是虽然我在国内读本科的时候也上过OS课，但是远远没有达到能手写Kernel的水平，我想绝大多数国内的本科教学都没有达到这个高度。自学的话也很困难，一方面是写Kernel难度确实大，另一方面是没有相应的toolchain来debug，毕业以后再想尝试的话就只有找Kernel相关的工作了，所以这门课是一个挺宝贵的机会。</p><p>再加上看到前人对这门课的难度评价这么高，就激起了我的好胜心，偏要来试试。所以我也把这门课当作一个试炼，来检验我近六年的编程学习能不能hold住手写Kernel。</p><h1 id="课程介绍">课程介绍</h1><p>接下来是无聊的课程介绍，只想看我的主观看法的可以往下翻到下一节去了。</p><h2 id="选课">选课</h2><p>OS这门课不是有位置就能选的，它的waitlist不是一个FIFO结构，老师会手动的register，因此想选这门课的同学最好先上完三门system课（包括15213/15513/18600）。</p><h2 id="老师">老师</h2><p>我是在刚刚过去的18 Spring上的这门课，老师是<a href="http://www.cs.cmu.edu/~davide/" target="_blank" rel="noopener">Dave Eckhardt</a>和<a href="http://www.cs.cmu.edu/~bpr" target="_blank" rel="noopener">Brian Railing</a>。Dave教这门课教了挺久了，Brian也在教15213，所以老师们的水平是很高的。</p><img src="https://wx2.sinaimg.cn/small/4c1654ddly1frf7i3fv50j20du0dujsr.jpg" alt="" referrerpolicy="no-referrer"></img><p>上面这个大胡子就是Dave……</p><p>这门课应该在Fall和Spring都有开，但是Fall应该会有两个section，总人数都在40多人左右。</p><h2 id="lectures">Lectures</h2><p>每周上三次课，每次50分钟。Lecture的内容其实跟国内的差不多，进程线程，中断，虚拟内存，同步，死锁，自举，IPC，任务调度等等。后半部分会有一些比较现代一点的东西（其实也不算现代了……）比如虚拟化和内核安全。因为在大约midterm的时候就要开始写kernel project，所以一些比较重要的东西的进度会很快（虚拟内存，同步，调度等等），如果是初次接触这些概念的话可能会要花费大量的时间在上课以外，这个要注意。</p><h2 id="projects">Projects</h2><p>OS总共有5个Project，其中第三个和第四个是比较重要的，尤其以第四个Kernel project最重要。从第三个project开始是要两人的team来写。</p><h3 id="p0">P0</h3><p>第一个Project很简单，写一个stack backtrace的函数，被invoke的时候把调用栈打印出来。主要考察的就是对x86 C程序的call convention的了解程度。</p><h3 id="p1">P1</h3><p>第二个project是写一个跑在kernel space的小游戏，具体是什么游戏每年都在换，并不重要。主要是要编写键盘，时钟和console这三个驱动，实际操练一下怎么处理硬件中断。</p><h3 id="p2">P2</h3><p>第三个project的难度就有点提高了，也是开始要团队合作了（然而我不一样……看下文）。这个project要在user space实现一个multi-thread library以及相应的同步原语（synchronous primitive），就是一个类似于简易pthread的东西。提供一个写好的kernel（这个kernel的绝大多数功能都是在p3要实现的），在这个kernel上面写library。你需要处理thread的创建，销毁和同步，还要实现mutex，condition variable，semaphore和read/write lock等同步机制。这个project的难点在debug上，并发的同步问题debug起来非常恶心，但这个恰恰是OS这门课要搞明白的核心问题，并发问题从p2开始就会一直阴魂不散直到你考完Final为止。</p><h3 id="p3">P3</h3><p>大约在midterm之前的那一周，P3就会开始了，这个project的难度也体现在它的时间跨度上，单单这一个project就需要约50天，P2也只给了两周时间而已。</p><p>在这个project里，你要实现一个功能基本完整的抢占式分时多任务内核，主要包括：</p><ul><li>虚拟内存（使用二级页表）</li><li>内存管理</li><li>硬件驱动</li><li>多进程，多线程支持</li><li>时钟驱动的线程调度器</li><li>约二十多个系统调用</li><li>内核抢占</li><li>处理faults/exceptions</li></ul><p>我在写这个project的过程中，最困难的点就是实现一个优雅的上下文切换和内核同步了。Kernel在从一个thread切换到另一个thread的时候会进行上下文切换（context switch），这一部分需要保存thread的上下文（context），用汇编+thread的内核栈（kernel stack）可以非常优雅地实现它。而内核地同步机制需要在P2的同步原语的基础上做一些修改，因为P2依赖的是kernel的调度器，到P3调度器本身都会依赖这些原语，很容易就变成一个先有鸡还是先有蛋的问题。所以在P2的时候一定要尽量写得robust一点，不然一旦启用了时钟中断可能就炸的彻底。</p><p>这个Project的debug更恶心了，因为现在连一个可信的kernel都没有了，调试工具也不怎么好用，我面对各种死锁问题只能一点一点打log。另外，对于用汇编写的内存操作要极其小心地来安排，有时候会觉得是在捧着一大摞摇摇欲坠的玻璃杯，稍有不慎你辛辛苦苦写的kernel就死给你看。</p><p>我在这个Project上大约总共花了70-80小时的时间，代码量约在5000+左右，从三月初考完midterm一直到春假结束基本写完，<s>然后浪了一个多月</s>，所以50天还是非常充足的。</p><h3 id="p4">P4</h3><p>P4只有一周多的时间，要在P3的基础上实现一个更高级一点的功能，每个学期要实现的东西都不同，这学期要写一个user space的go风格协程库（实际上是要在P2的基础上来修改，只不过要跑在P3你写的Kernel上）+一个类似于signal的软时钟中断。没有什么普适性，就不多说了。</p><h2 id="成绩">成绩</h2><p>OS有期中和期末两次考试，最后成绩主要就是两次考试+Projects，两次考试都固定有一题是要手写一个新的sync数据结构和函数。其他题基本是简答题和找deadlock之类的问题。我觉得我的考试考的并不是很好，所以最后并没有拿到A……(T_T)，想拿A的话重点关注Projects和考试。</p><h1 id="体会">体会</h1><h2 id="难度">难度</h2><p>我想很多同学都是非常关心难度的问题，老实说，这是一个小马过河的问题，到底难不难你只有上过才知道。这门课我上下来觉得并没有传说中那么难，远远没有难到无法下手的程度，对我来说，可能没有一些Advanced XXX的读论文的课来的难<s>能用代码解决的问题都不是问题</s>，毕竟它只是一门本科生课程。</p><p>如果你本科的时候上过OS，或者对于自己的C语言功底有自信，那么我觉得选这门课还是很不错的。但是有一点要注意，这门课有15学分，不同于大多数课的12学分，而ECE的master有每学期48学分的选课限制，因此如果你一学期需要三门课来保持合法身份，那么选了这门课，你就没法再选一门课当作备份，也就是说不采取一些其他措施的话不能中途drop掉它。</p><h2 id="team">Team</h2><p>之前说了这门课从P2开始是组队写，然而我因为种种原因，错过了组队那节课，导致只能孤家寡人的solo所有project。我发现找不到partner之后有几天非常恐慌，觉得这门课很有可能要fail了，但是实际写下来，发现team和solo各自有利有弊。Team的好处是各种问题都有人可以讨论，不容易走入死胡同出不来，而缺点是两个人合作互相之间的沟通成本很高（仍然是一个同步问题），以及代码的质量问题会被放大。而Solo就不存在沟通的问题。</p><h2 id="其他学到的东西">其他学到的东西</h2><p>除了OS的知识以外，我想我还从这门课中学到了一些其他的东西。我觉得最重要的一条就是<em>There is no magic</em>，内核再复杂，也是像我这种普通人能力可及的范围，它不是魔法，这让我在以后面对复杂项目的时候不至于一下子被吓倒，我觉得这种信心是很重要的。</p><p>另一点就是一个好的设计可以成倍地节约debug时间，P4的时候我就没有仔细的重新设计结构，导致debug的时候到处都是问题并且重构成本极高。</p><h1 id="这学期的其他课">这学期的其他课</h1><p>为了OS，我这学期特意选了两门看上去不是很难的课，虽然最后实际上不需要这么小心翼翼ㄟ( ▔, ▔ )ㄏ。</p><h2 id="17437-web-application-development">17437 Web Application Development</h2><p>就是从最基础的HTML开始学WEB开发，讲的东西都很基础，后端是用Django。说实话我并不是很推荐，因为这个课讲的东西实在是太基础了，完全是可以自学的。前端部分最难也就是到AJAX+jQuery，在现在的前端圈子看来大概是属于上古技术了。后端也就是写写models，forms，templates等一些很烦的东西。只有期末考试，选择题+简答题+手写Django应用题←没错也是手写。</p><h2 id="14735-secure-code">14735 Secure Code</h2><p>主要讲如何写安全的C/C++，少量的其他类型程序的安全性。这门课可以做ECE master的核心课。这门课有约一半的时间是在看汇编找漏洞并且构造攻击输入来达到运行特定函数的目的<s>硬核黑客</s>，虽然基本都是各种字符串溢出问题，但这一部分还是挺有意思的，剩下的时间会讲一些fuzzing，formal method之类的内容。没有考试。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想很多CMU的同学在选课的时候都搜到过关于&lt;a href=&quot;https://www.cs.cmu.edu/~410/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;15410/15605 Operating System Design and Implementation&lt;/a&gt;这门课的传说，比如&lt;a href=&quot;https://www.zhihu.com/question/28249230/answer/131257766&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇&lt;/a&gt;，比如&lt;a href=&quot;http://www.1point3acres.com/bbs/thread-198949-1-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇&lt;/a&gt;。BTW，我是从前面那篇介绍知道的这门课。以前学长们的介绍都挺详细了，我在这里就是记录一下我这个学期上这门课的体会吧，有很多地方与前人的介绍会有重复，毕竟这门课应该好久没有改过了😑。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://blog.xiadong.info/categories/Life/"/>
    
    
      <category term="Life" scheme="http://blog.xiadong.info/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>三门问题（蒙提霍尔问题）</title>
    <link href="http://blog.xiadong.info/2018/04/07/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98%EF%BC%88%E8%92%99%E6%8F%90%E9%9C%8D%E5%B0%94%E9%97%AE%E9%A2%98%EF%BC%89/"/>
    <id>http://blog.xiadong.info/2018/04/07/三门问题（蒙提霍尔问题）/</id>
    <published>2018-04-07T18:40:43.000Z</published>
    <updated>2020-05-01T04:19:39.987Z</updated>
    
    <content type="html"><![CDATA[<p>三门问题，又称<a href="https://zh.wikipedia.org/zh-hans/%E8%92%99%E6%8F%90%E9%9C%8D%E7%88%BE%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">蒙提霍尔问题</a>我很久以前就在网上看到过，但是一直对于网上流传的各种复杂的概率解释没什么兴趣，也一直没有想明白。昨天跟朋友突然说起这个问题，起因是虎扑的这个<a href="https://bbs.hupu.com/21882854.html" target="_blank" rel="noopener">帖子</a>试图用蒙特卡罗模拟来实验一下（可惜的是，这个程序写的有点小错误，不知道你发现没有），也激发了我想来用程序模拟一下的想法，没想到思考了一会之后发现从逻辑的角度来说可以非常简单的解释和理解，不需要任何概率统计的知识（或者说，小学水平？）。</p><a id="more"></a><h1 id="问题">问题</h1><blockquote><p>参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车或者是奖品，选中后面有车的那扇门就可以赢得该汽车或奖品，而另外两扇门后面则各藏有一只山羊或者是后面没有任何东西。当参赛者选定了一扇门，但未去开启它的时候，知道门后情形的节目主持人会开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机会率？</p></blockquote><p>以上问题描述摘自维基百科。</p><p>首先有一点可以明确：如果参赛者不更换的话，那么他选中汽车的概率是1/3,这与主持人做了什么完全无关。所以我们现在要考虑的是参赛者会更换选择的情况，也就是说，我们假定参赛者在主持人开门后一定会更换选择。</p><h1 id="穷举？">穷举？</h1><p>我昨天在一开始思考的时候，因为只有三扇门，所以很自然地想到了穷举这个万金油解法：</p><ol><li>假设两者羊是不同的（羊A，羊B），这样是为了思考起来更清晰</li><li>那么初始的排列情况便是3的全排列，3×2×1=6种</li><li>一开始选手从三扇门里面随机选择一扇，于是有3×6=18种情况，其中12种选中了羊，6种选中了车</li><li>如果选手运气比较差一开始选中了羊，那么主持人只能打开另一扇有羊的门，所以依然是12种情况，更换后选中车</li><li>如果选手一开始选中了车，那么主持人就有两种开门选择（羊A/羊B），所以有6×2=12种情况，更换后选中羊</li><li>所以更换选择后选中车的概率是12/24=1/2。嗯？</li></ol><p>如果你看过这个问题的答案的话，就会知道1/2这个答案是错误的，然而错在那里了呢？我在昨天洗澡的时候想通了这个问题（我发现洗澡的时候经常能想通一些问题）。本文的读者如果不明白的话可以先思考一下，我后面再解释错在哪里。</p><h1 id="coding">Coding</h1><blockquote><p>Talk is cheap. Show me the code.</p></blockquote><p>后来我尝试写程序来模拟一下结果，在构思程序的时候发现一个关键问题：<strong>什么情况下会在变换选择后会选到汽车？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from random import choice</span><br><span class="line"></span><br><span class="line"># Number of cycles that the player changes to the car</span><br><span class="line">change_to_right &#x3D; 0</span><br><span class="line">cycles &#x3D; 10000</span><br><span class="line"></span><br><span class="line">for i in range(0, cycles):</span><br><span class="line">  doors &#x3D; [0, 0, 0]</span><br><span class="line">  index &#x3D; [0, 1, 2]</span><br><span class="line">  car &#x3D; choice(index)</span><br><span class="line">  </span><br><span class="line">  choose &#x3D; choice(index)</span><br><span class="line">  # PROBLEM</span><br><span class="line">  if ？:</span><br><span class="line">    change_to_right +&#x3D; 1</span><br><span class="line"></span><br><span class="line">print(float(change_to_right) &#x2F; float(cycles))</span><br></pre></td></tr></table></figure><p>参赛者在第一次选择之后，有两种情况，选中车（1/3），选中羊（2/3），再来分情况讨论一下：</p><ol><li>如果第一次选中了车，那么主持人打开一扇门之后，剩下的一扇门里面也是羊，此时如果更换选择（我们已经假设一定会），则<strong>肯定会选到羊</strong></li><li>如果第一次选中了羊，那么主持人只能打开另一扇有羊的门，此时更换选择，则<strong>肯定会选到车</strong></li></ol><p>到这里就很清楚了，如果第一次没选中，则更换后就会选中（2/3），如果第一次选中，则更换后就不会选中（1/3）。因此更换选择选中车的概率是2/3。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from random import choice</span><br><span class="line"></span><br><span class="line"># Number of cycles that the player changes to the car</span><br><span class="line">change_to_right &#x3D; 0</span><br><span class="line">cycles &#x3D; 10000</span><br><span class="line"></span><br><span class="line">for i in range(0, cycles):</span><br><span class="line">  doors &#x3D; [0, 0, 0]</span><br><span class="line">  index &#x3D; [0, 1, 2]</span><br><span class="line">  car &#x3D; choice(index)</span><br><span class="line">  </span><br><span class="line">  choose &#x3D; choice(index)</span><br><span class="line">  if choose !&#x3D; car:</span><br><span class="line">    change_to_right +&#x3D; 1</span><br><span class="line"></span><br><span class="line">print(float(change_to_right) &#x2F; float(cycles))</span><br></pre></td></tr></table></figure><h1 id="那么穷举错在哪里？">那么穷举错在哪里？</h1><p>聪明的读者应该已经发现前文的穷举法错在哪里，问题就在于最后计算概率的时候</p><blockquote><ol><li>所以更换选择后选中车的概率是12/24=1/2。</li></ol></blockquote><p>这里24是12+12得来的。然而这么计算是有前提的，就是这24种情况是<strong>等概率的</strong>（概率都忘光了，应该是这么说吧），结果错误的原因就是这24种情况不等概率。</p><blockquote><ol><li>如果选手运气比较差一开始选中了羊，那么主持人只能打开另一扇有羊的门，所以依然是12种情况，更换后选中车</li><li>如果选手一开始选中了车，那么主持人就有两种开门选择（羊A/羊B），所以有6×2=12种情况，更换后选中羊</li></ol></blockquote><p>在第四步中，主持人其实也有两种选择（所以如果不考虑门后是车还是羊的话，应该有18×2=36种最终情况），但是其中一种打开是车，主持人会<strong>回避掉</strong>这种情况，这就使第四步中那12种情况的出现概率翻倍了（原本的概率+主持人打开有车的门的概率），因此选中车的概率仍然是(12×2)/(12×2+12)=2/3。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三门问题，又称&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E8%92%99%E6%8F%90%E9%9C%8D%E7%88%BE%E5%95%8F%E9%A1%8C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;蒙提霍尔问题&lt;/a&gt;我很久以前就在网上看到过，但是一直对于网上流传的各种复杂的概率解释没什么兴趣，也一直没有想明白。昨天跟朋友突然说起这个问题，起因是虎扑的这个&lt;a href=&quot;https://bbs.hupu.com/21882854.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;帖子&lt;/a&gt;试图用蒙特卡罗模拟来实验一下（可惜的是，这个程序写的有点小错误，不知道你发现没有），也激发了我想来用程序模拟一下的想法，没想到思考了一会之后发现从逻辑的角度来说可以非常简单的解释和理解，不需要任何概率统计的知识（或者说，小学水平？）。&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://blog.xiadong.info/categories/Study/"/>
    
    
      <category term="Python" scheme="http://blog.xiadong.info/tags/Python/"/>
    
      <category term="因垂丝汀" scheme="http://blog.xiadong.info/tags/%E5%9B%A0%E5%9E%82%E4%B8%9D%E6%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 803. Bricks Falling When Hit</title>
    <link href="http://blog.xiadong.info/2018/03/18/LeetCode-803-Bricks-Falling-When-Hit/"/>
    <id>http://blog.xiadong.info/2018/03/18/LeetCode-803-Bricks-Falling-When-Hit/</id>
    <published>2018-03-18T18:39:40.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>We have a grid of 1s and 0s; the 1s in a cell represent bricks. A brick will not drop if and only if it is directly connected to the top of the grid, or at least one of its (4-way) adjacent bricks will not drop.</p><p>We will do some erasures sequentially. Each time we want to do the erasure at the location (i, j), the brick (if it exists) on that location will disappear, and then some other bricks may drop because of that erasure.</p><p>Return an array representing the number of bricks that will drop after each erasure in sequence.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: </span><br><span class="line">grid &#x3D; [[1,0,0,0],[1,1,1,0]]</span><br><span class="line">hits &#x3D; [[1,0]]</span><br><span class="line">Output: [2]</span><br><span class="line">Explanation: </span><br><span class="line">If we erase the brick at (1, 0), the brick at (1, 1) and (1, 2) will drop. So we should return 2.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example 2:</span><br><span class="line">Input: </span><br><span class="line">grid &#x3D; [[1,0,0,0],[1,1,0,0]]</span><br><span class="line">hits &#x3D; [[1,1],[1,0]]</span><br><span class="line">Output: [0,0]</span><br><span class="line">Explanation: </span><br><span class="line">When we erase the brick at (1, 0), the brick at (1, 1) has already disappeared due to the last move. So each erasure will cause no bricks dropping.  Note that the erased brick (1, 0) will not be counted as a dropped brick.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>The number of rows and columns in the grid will be in the range [1, 200].</li><li>The number of erasures will not exceed the area of the grid.</li><li>It is guaranteed that each erasure will be located inside the grid.</li><li>An erasure may refer to a location with no brick - if it does, no bricks drop.</li></ul><a id="more"></a><p>这道题比赛的时候没有想出来，看了下AC的代码，发现可以用反向的并查集来做。这个反向的思维就是关键了。</p><p>先把<code>hits</code>正向走一遍，删除要删除的节点。最后得到一个剩余的bricks的图，把这些剩余的bricks用并查集分类，为了后面的方便，可以在头节点记录集合中有多少个bricks，在merge的时候把数量也merge了。merge的时候对于top的bricks特殊考虑，优先把它们作为head。</p><p>接着逆向地把<code>hits</code>删掉的bricks一个一个加回去，每次都与四个方向merge。merge之后看该brick的head是否在top，如果不在，说明这次remove没有导致任何bricks fall。如果在，说明有掉落，那么merge的时候head不在top的bricks集合就是本次删除会fall的bricks。</p><p>代码写的不是很好看。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; afterGrid;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; uf;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; setNum;</span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; directions = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">hitBricks</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; hits)</span> </span>&#123;</span><br><span class="line">        row = grid.size();</span><br><span class="line">        col = grid[<span class="number">0</span>].size();</span><br><span class="line">        init (grid, hits);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = hits.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = hits[i][<span class="number">0</span>], y = hits[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!grid[x][y]) &#123;</span><br><span class="line">                ans.push_back(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            afterGrid[x][y] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">auto</span> p1 = make_pair(x, y);</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            uf[x][y] = make_pair(x, y);</span><br><span class="line">            setNum[x][y] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;k : directions) &#123;</span><br><span class="line">                <span class="keyword">auto</span> p2 = make_pair(x + k.first, y + k.second);</span><br><span class="line">                <span class="keyword">if</span> (!valid(p2) || afterGrid[p2.first][p2.second] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">auto</span> h2 = head(p2);</span><br><span class="line">                <span class="keyword">auto</span> h1 = head(p1);</span><br><span class="line">                <span class="keyword">if</span> (h1 == h2) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (h2.first != <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt += setNum[h2.first][h2.second];</span><br><span class="line">                &#125;</span><br><span class="line">                merge(p1, p2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">auto</span> h = head(p1);</span><br><span class="line">            <span class="keyword">if</span> (h.first != <span class="number">0</span>) &#123;</span><br><span class="line">                ans.push_back(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans.push_back(cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(ans.begin(), ans.end());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; hits)</span> </span>&#123;</span><br><span class="line">        afterGrid = grid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;hit : hits) &#123;</span><br><span class="line">            afterGrid[hit[<span class="number">0</span>]][hit[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uf = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt;(row, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;(col, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">        setNum.assign(row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!afterGrid[i][j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                uf[i][j] = make_pair(i, j);</span><br><span class="line">                setNum[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!afterGrid[i][j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">auto</span> p1 = make_pair(i, j);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;k : directions) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> p2 = make_pair(i + k.first, j + k.second);</span><br><span class="line">                    <span class="keyword">if</span> (!valid(p2) || afterGrid[p2.first][p2.second] == <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    merge(p1, p2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.first &gt;= <span class="number">0</span> &amp;&amp; p.first &lt; row &amp;&amp; p.second &gt;= <span class="number">0</span> &amp;&amp; p.second &lt; col;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pair&lt;int, int&gt; head(pair&lt;int, int&gt; p) &#123;</span><br><span class="line">        <span class="keyword">while</span> (uf[p.first][p.second] != p) &#123;</span><br><span class="line">            p = uf[p.first][p.second];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span> <span class="params">(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> h1 = head(a), h2 = head(b);</span><br><span class="line">        <span class="keyword">if</span> (h1 == h2)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (h1.first == <span class="number">0</span>) &#123;</span><br><span class="line">            uf[h2.first][h2.second] = h1;</span><br><span class="line">            setNum[h1.first][h1.second] += setNum[h2.first][h2.second];</span><br><span class="line">            setNum[h2.first][h2.second] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            uf[h1.first][h1.second] = h2;</span><br><span class="line">            setNum[h2.first][h2.second] += setNum[h1.first][h1.second];</span><br><span class="line">            setNum[h1.first][h1.second] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We have a grid of 1s and 0s; the 1s in a cell represent bricks. A brick will not drop if and only if it is directly connected to the top of the grid, or at least one of its (4-way) adjacent bricks will not drop.&lt;/p&gt;
&lt;p&gt;We will do some erasures sequentially. Each time we want to do the erasure at the location (i, j), the brick (if it exists) on that location will disappear, and then some other bricks may drop because of that erasure.&lt;/p&gt;
&lt;p&gt;Return an array representing the number of bricks that will drop after each erasure in sequence.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grid &amp;#x3D; [[1,0,0,0],[1,1,1,0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hits &amp;#x3D; [[1,0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If we erase the brick at (1, 0), the brick at (1, 1) and (1, 2) will drop. So we should return 2.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grid &amp;#x3D; [[1,0,0,0],[1,1,0,0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hits &amp;#x3D; [[1,1],[1,0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [0,0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;When we erase the brick at (1, 0), the brick at (1, 1) has already disappeared due to the last move. So each erasure will cause no bricks dropping.  Note that the erased brick (1, 0) will not be counted as a dropped brick.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The number of rows and columns in the grid will be in the range [1, 200].&lt;/li&gt;
&lt;li&gt;The number of erasures will not exceed the area of the grid.&lt;/li&gt;
&lt;li&gt;It is guaranteed that each erasure will be located inside the grid.&lt;/li&gt;
&lt;li&gt;An erasure may refer to a location with no brick - if it does, no bricks drop.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="图" scheme="http://blog.xiadong.info/tags/%E5%9B%BE/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="并查集" scheme="http://blog.xiadong.info/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 802. Find Eventual Safe States</title>
    <link href="http://blog.xiadong.info/2018/03/18/LeetCode-802-Find-Eventual-Safe-States/"/>
    <id>http://blog.xiadong.info/2018/03/18/LeetCode-802-Find-Eventual-Safe-States/</id>
    <published>2018-03-18T18:37:52.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>In a directed graph, we start at some node and every turn, walk along a directed edge of the graph. If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.</p><p>Now, say our starting node is *eventually safe *if and only if we must eventually walk to a terminal node. More specifically, there exists a natural number <code>K</code> so that for any choice of where to walk, we must have stopped at a terminal node in less than <code>K</code> steps.</p><p>Which nodes are eventually safe? Return them as an array in sorted order.</p><p>The directed graph has <code>N</code> nodes with labels <code>0, 1, ..., N-1</code>, where <code>N</code> is the length of <code>graph</code>. The graph is given in the following form: <code>graph[i]</code> is a list of labels <code>j</code> such that <code>(i, j)</code> is a directed edge of the graph.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: graph &#x3D; [[1,2],[2,3],[5],[0],[5],[],[]]</span><br><span class="line">Output: [2,4,5,6]</span><br><span class="line">Here is a diagram of the above graph.</span><br></pre></td></tr></table></figure><p><a href="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png" target="_blank" rel="noopener"><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png" alt="Illustration of graph"></a></p><p><strong>Note:</strong></p><ul><li><code>graph</code> will have length at most <code>10000</code>.</li><li>The number of edges in the graph will not exceed <code>32000</code>.</li><li>Each <code>graph[i]</code> will be a sorted list of different integers, chosen within the range <code>[0, graph.length - 1]</code>.</li></ul><a id="more"></a><p>这道题可以用找环来解决，所有在环中的node和后继node有在环中的node都不是safe的。使用DFS来搜索环，遇到已经判断过的就不需要再继续搜索。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; circle;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">eventualSafeNodes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        circle.assign(graph.size(), <span class="number">0</span>);</span><br><span class="line">        visited.assign(graph.size(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.size(); i++) &#123;</span><br><span class="line">            dfs(graph, path, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; circle.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!circle[i])</span><br><span class="line">                ans.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; &amp;path, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (circle[node] || path.count(node)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> i : path) &#123;</span><br><span class="line">                    circle[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        visited[node] = <span class="number">1</span>;</span><br><span class="line">        path.insert(node);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : graph[node]) &#123;</span><br><span class="line">            dfs(graph, path, i);</span><br><span class="line">        &#125;</span><br><span class="line">        path.erase(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In a directed graph, we start at some node and every turn, walk along a directed edge of the graph. If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.&lt;/p&gt;
&lt;p&gt;Now, say our starting node is *eventually safe *if and only if we must eventually walk to a terminal node. More specifically, there exists a natural number &lt;code&gt;K&lt;/code&gt; so that for any choice of where to walk, we must have stopped at a terminal node in less than &lt;code&gt;K&lt;/code&gt; steps.&lt;/p&gt;
&lt;p&gt;Which nodes are eventually safe? Return them as an array in sorted order.&lt;/p&gt;
&lt;p&gt;The directed graph has &lt;code&gt;N&lt;/code&gt; nodes with labels &lt;code&gt;0, 1, ..., N-1&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the length of &lt;code&gt;graph&lt;/code&gt;. The graph is given in the following form: &lt;code&gt;graph[i]&lt;/code&gt; is a list of labels &lt;code&gt;j&lt;/code&gt; such that &lt;code&gt;(i, j)&lt;/code&gt; is a directed edge of the graph.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: graph &amp;#x3D; [[1,2],[2,3],[5],[0],[5],[],[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [2,4,5,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Here is a diagram of the above graph.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png&quot; alt=&quot;Illustration of graph&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;graph&lt;/code&gt; will have length at most &lt;code&gt;10000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The number of edges in the graph will not exceed &lt;code&gt;32000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;graph[i]&lt;/code&gt; will be a sorted list of different integers, chosen within the range &lt;code&gt;[0, graph.length - 1]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="图" scheme="http://blog.xiadong.info/tags/%E5%9B%BE/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 801. Minimum Swaps To Make Sequences Increasing</title>
    <link href="http://blog.xiadong.info/2018/03/18/LeetCode-801-Minimum-Swaps-To-Make-Sequences-Increasing/"/>
    <id>http://blog.xiadong.info/2018/03/18/LeetCode-801-Minimum-Swaps-To-Make-Sequences-Increasing/</id>
    <published>2018-03-18T18:36:36.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>We have two integer sequences <code>A</code> and <code>B</code> of the same non-zero length.</p><p>We are allowed to swap elements <code>A[i]</code> and <code>B[i]</code>. Note that both elements are in the same index position in their respective sequences.</p><p>At the end of some number of swaps, <code>A</code> and <code>B</code> are both strictly increasing. (A sequence is <em>strictly increasing</em> if and only if <code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>.)</p><p>Given A and B, return the minimum number of swaps to make both sequences strictly increasing. It is guaranteed that the given input always makes it possible.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: A &#x3D; [1,3,5,4], B &#x3D; [1,2,3,7]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">Swap A[3] and B[3].  Then the sequences are:</span><br><span class="line">A &#x3D; [1, 3, 5, 7] and B &#x3D; [1, 2, 3, 4]</span><br><span class="line">which are both strictly increasing.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>A, B</code> are arrays with the same length, and that length will be in the range <code>[1, 1000]</code>.</li><li><code>A[i], B[i]</code> are integer values in the range <code>[0, 2000]</code>.</li></ul><a id="more"></a><p>使用DP，如果array长度为n，那么使用2行n列的二维DP。<code>dp[0][i]</code>保存<code>i</code>位置没有交换的步数，<code>dp[1][i]</code>保存<code>i</code>位置交换了的最小步数。与<code>i-1</code>位置的情况组合之后有四种情况。但是实际上只有两种：</p><ol><li>在<code>i-1</code>位置没有交换的情况下<code>i</code>位置不需要交换；<code>i-1</code>和<code>i</code>位置都进行了交换。这两种情况都是<code>A</code>和<code>B</code>的<code>i</code>元素分别大于<code>i-1</code>元素。</li><li>如果<code>A</code>或<code>B</code>中有一个不满足递增，那么就要交换，分为<code>i-1</code>交换和<code>i</code>交换两种。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSwap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(len, INT_MAX))</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; A[i - <span class="number">1</span>] &amp;&amp; B[i] &gt; B[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = min(dp[<span class="number">0</span>][i], dp[<span class="number">0</span>][i - <span class="number">1</span>]);</span><br><span class="line">                dp[<span class="number">1</span>][i] = min(dp[<span class="number">1</span>][i], dp[<span class="number">1</span>][i - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; B[i - <span class="number">1</span>] &amp;&amp; B[i] &gt; A[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = min(dp[<span class="number">0</span>][i], dp[<span class="number">1</span>][i - <span class="number">1</span>]);</span><br><span class="line">                dp[<span class="number">1</span>][i] = min(dp[<span class="number">1</span>][i], dp[<span class="number">0</span>][i - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(dp[<span class="number">0</span>][len - <span class="number">1</span>], dp[<span class="number">1</span>][len - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We have two integer sequences &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; of the same non-zero length.&lt;/p&gt;
&lt;p&gt;We are allowed to swap elements &lt;code&gt;A[i]&lt;/code&gt; and &lt;code&gt;B[i]&lt;/code&gt;. Note that both elements are in the same index position in their respective sequences.&lt;/p&gt;
&lt;p&gt;At the end of some number of swaps, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are both strictly increasing. (A sequence is &lt;em&gt;strictly increasing&lt;/em&gt; if and only if &lt;code&gt;A[0] &amp;lt; A[1] &amp;lt; A[2] &amp;lt; ... &amp;lt; A[A.length - 1]&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Given A and B, return the minimum number of swaps to make both sequences strictly increasing. It is guaranteed that the given input always makes it possible.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: A &amp;#x3D; [1,3,5,4], B &amp;#x3D; [1,2,3,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Swap A[3] and B[3].  Then the sequences are:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A &amp;#x3D; [1, 3, 5, 7] and B &amp;#x3D; [1, 2, 3, 4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;which are both strictly increasing.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A, B&lt;/code&gt; are arrays with the same length, and that length will be in the range &lt;code&gt;[1, 1000]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A[i], B[i]&lt;/code&gt; are integer values in the range &lt;code&gt;[0, 2000]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="动态规划" scheme="http://blog.xiadong.info/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 800. Similar RGB Color</title>
    <link href="http://blog.xiadong.info/2018/03/18/LeetCode-800-Similar-RGB-Color/"/>
    <id>http://blog.xiadong.info/2018/03/18/LeetCode-800-Similar-RGB-Color/</id>
    <published>2018-03-18T18:33:27.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>In the following, every capital letter represents some hexadecimal digit from <code>0</code> to <code>f</code>.</p><p>The red-green-blue color <code>&quot;#AABBCC&quot;</code> can be written as <code>&quot;#ABC&quot;</code> in shorthand. For example, <code>&quot;#15c&quot;</code> is shorthand for the color <code>&quot;#1155cc&quot;</code>.</p><p>Now, say the similarity between two colors <code>&quot;#ABCDEF&quot;</code> and <code>&quot;#UVWXYZ&quot;</code> is <code>-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2</code>.</p><p>Given the color <code>&quot;#ABCDEF&quot;</code>, return a 7 character color that is most similar to <code>#ABCDEF</code>, and has a shorthand (that is, it can be represented as some <code>&quot;#XYZ&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: color &#x3D; &quot;#09f166&quot;</span><br><span class="line">Output: &quot;#11ee66&quot;</span><br><span class="line">Explanation:  </span><br><span class="line">The similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 &#x3D; -64 -9 -0 &#x3D; -73.</span><br><span class="line">This is the highest among any shorthand color.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>color</code> is a string of length <code>7</code>.</li><li><code>color</code> is a valid RGB color: for <code>i &gt; 0</code>, <code>color[i]</code> is a hexadecimal digit from <code>0</code> to <code>f</code></li><li>Any answer which has the same (highest) similarity as the best answer will be accepted.</li><li>All inputs and outputs should use lowercase letters, and the output is 7 characters.</li></ul><a id="more"></a><p>暴力穷举。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> shex = <span class="string">"0123456789abcdef"</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">similarRGB</span><span class="params">(<span class="built_in">string</span> color)</span> </span>&#123;</span><br><span class="line">        color = color.substr(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> ans = <span class="string">"000"</span>;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">int</span> minVal = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shex.length(); i++) &#123;</span><br><span class="line">            ans[<span class="number">0</span>] = shex[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; shex.length(); j++) &#123;</span><br><span class="line">                ans[<span class="number">1</span>] = shex[j];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; shex.length(); k++) &#123;</span><br><span class="line">                    ans[<span class="number">2</span>] = shex[k];</span><br><span class="line">                    <span class="built_in">string</span> tmp = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">auto</span> ch : ans) &#123;</span><br><span class="line">                        tmp.push_back(ch); tmp.push_back(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">int</span> val = calc(color, tmp);</span><br><span class="line">                    <span class="keyword">if</span> (minVal &lt; val) &#123;</span><br><span class="line">                        minVal = val;</span><br><span class="line">                        ret = tmp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"#"</span> + ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span> <span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp1 = a.substr(i, <span class="number">2</span>), tmp2 = b.substr(i, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> v1 = stoi(tmp1, <span class="literal">nullptr</span>, <span class="number">16</span>), v2 = stoi(tmp2, <span class="literal">nullptr</span>, <span class="number">16</span>);</span><br><span class="line">            ans -= (v1 - v2) * (v1 - v2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the following, every capital letter represents some hexadecimal digit from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The red-green-blue color &lt;code&gt;&amp;quot;#AABBCC&amp;quot;&lt;/code&gt; can be written as &lt;code&gt;&amp;quot;#ABC&amp;quot;&lt;/code&gt; in shorthand. For example, &lt;code&gt;&amp;quot;#15c&amp;quot;&lt;/code&gt; is shorthand for the color &lt;code&gt;&amp;quot;#1155cc&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, say the similarity between two colors &lt;code&gt;&amp;quot;#ABCDEF&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;#UVWXYZ&amp;quot;&lt;/code&gt; is &lt;code&gt;-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given the color &lt;code&gt;&amp;quot;#ABCDEF&amp;quot;&lt;/code&gt;, return a 7 character color that is most similar to &lt;code&gt;#ABCDEF&lt;/code&gt;, and has a shorthand (that is, it can be represented as some &lt;code&gt;&amp;quot;#XYZ&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: color &amp;#x3D; &amp;quot;#09f166&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;#11ee66&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 &amp;#x3D; -64 -9 -0 &amp;#x3D; -73.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is the highest among any shorthand color.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt; is a string of length &lt;code&gt;7&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt; is a valid RGB color: for &lt;code&gt;i &amp;gt; 0&lt;/code&gt;, &lt;code&gt;color[i]&lt;/code&gt; is a hexadecimal digit from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Any answer which has the same (highest) similarity as the best answer will be accepted.&lt;/li&gt;
&lt;li&gt;All inputs and outputs should use lowercase letters, and the output is 7 characters.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="字符串" scheme="http://blog.xiadong.info/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 765. Couples Holding Hands</title>
    <link href="http://blog.xiadong.info/2018/01/14/LeetCode-765-Couples-Holding-Hands/"/>
    <id>http://blog.xiadong.info/2018/01/14/LeetCode-765-Couples-Holding-Hands/</id>
    <published>2018-01-14T11:09:28.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A <em>swap</em> consists of choosing <strong>any</strong> two people, then they stand up and switch seats.</p><p>The people and seats are represented by an integer from <code>0</code> to <code>2N-1</code>, the couples are numbered in order, the first couple being <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so on with the last couple being <code>(2N-2, 2N-1)</code>.</p><p>The couples’ initial seating is given by <code>row[i]</code> being the value of the person who is initially sitting in the i-th seat.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: row &#x3D; [0, 2, 1, 3]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: We only need to swap the second (row[1]) and third (row[2]) person.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: row &#x3D; [3, 2, 0, 1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: All couples are already seated side by side.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>len(row)</code> is even and in the range of <code>[4, 60]</code>.</li><li><code>row</code> is guaranteed to be a permutation of <code>0...len(row)-1</code>.</li></ol><a id="more"></a><p>说是Hard，其实并不Hard。从前到后依次把应该配对的人配好对就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSwapsCouples</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">seats</span><span class="params">(row.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row.size(); i++) &#123;</span><br><span class="line">            seats[row[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row.size(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> couple;</span><br><span class="line">            <span class="keyword">if</span> (row[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                couple = row[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                couple = row[i] - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (row[i + <span class="number">1</span>] != couple) &#123;</span><br><span class="line">                <span class="keyword">int</span> coupleSeat = seats[couple];</span><br><span class="line">                swap(seats[row[i + <span class="number">1</span>]], seats[couple]);</span><br><span class="line">                swap(row[i + <span class="number">1</span>], row[coupleSeat]);</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A &lt;em&gt;swap&lt;/em&gt; consists of choosing &lt;strong&gt;any&lt;/strong&gt; two people, then they stand up and switch seats.&lt;/p&gt;
&lt;p&gt;The people and seats are represented by an integer from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2N-1&lt;/code&gt;, the couples are numbered in order, the first couple being &lt;code&gt;(0, 1)&lt;/code&gt;, the second couple being &lt;code&gt;(2, 3)&lt;/code&gt;, and so on with the last couple being &lt;code&gt;(2N-2, 2N-1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The couples’ initial seating is given by &lt;code&gt;row[i]&lt;/code&gt; being the value of the person who is initially sitting in the i-th seat.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: row &amp;#x3D; [0, 2, 1, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: We only need to swap the second (row[1]) and third (row[2]) person.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: row &amp;#x3D; [3, 2, 0, 1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: All couples are already seated side by side.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;len(row)&lt;/code&gt; is even and in the range of &lt;code&gt;[4, 60]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row&lt;/code&gt; is guaranteed to be a permutation of &lt;code&gt;0...len(row)-1&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 764. Largest Plus Sign</title>
    <link href="http://blog.xiadong.info/2018/01/14/LeetCode-764-Largest-Plus-Sign/"/>
    <id>http://blog.xiadong.info/2018/01/14/LeetCode-764-Largest-Plus-Sign/</id>
    <published>2018-01-14T10:58:42.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>In a 2D <code>grid</code> from (0, 0) to (N-1, N-1), every cell contains a <code>1</code>, except those cells in the given list <code>mines</code> which are <code>0</code>. What is the largest axis-aligned plus sign of <code>1</code>s contained in the grid? Return the order of the plus sign. If there is none, return 0.</p><p>An “<em>axis-aligned plus sign of 1s</em> of order <strong>k</strong>” has some center <code>grid[x][y] = 1</code> along with 4 arms of length <code>k-1</code> going up, down, left, and right, and made of <code>1</code>s. This is demonstrated in the diagrams below. Note that there could be <code>0</code>s or <code>1</code>s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.</p><p><strong>Examples of Axis-Aligned Plus Signs of Order k:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Order 1:</span><br><span class="line">000</span><br><span class="line">010</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">Order 2:</span><br><span class="line">00000</span><br><span class="line">00100</span><br><span class="line">01110</span><br><span class="line">00100</span><br><span class="line">00000</span><br><span class="line"></span><br><span class="line">Order 3:</span><br><span class="line">0000000</span><br><span class="line">0001000</span><br><span class="line">0001000</span><br><span class="line">0111110</span><br><span class="line">0001000</span><br><span class="line">0001000</span><br><span class="line">0000000</span><br></pre></td></tr></table></figure><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: N &#x3D; 5, mines &#x3D; [[4, 2]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11011</span><br><span class="line">In the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: N &#x3D; 2, mines &#x3D; []</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">There is no plus sign of order 2, but there is of order 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: N &#x3D; 1, mines &#x3D; [[0, 0]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation:</span><br><span class="line">There is no plus sign, so return 0.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>N</code> will be an integer in the range <code>[1, 500]</code>.</li><li><code>mines</code> will have length at most <code>5000</code>.</li><li><code>mines[i]</code> will be length 2 and consist of integers in the range <code>[0, N-1]</code>.</li><li><em>(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)</em></li></ol><a id="more"></a><p>这道题对我来说挺坑的，我一开始不想用二位数组来保存mines的位置，而是使用<code>set</code>\<code>unordered_set</code>来保存，导致超时……后来又想了很久找到了另一种解法。</p><h2 id="brute-force">Brute force</h2><p>对每一个点，都依次向外搜索最大的+，最坏时间复杂度为O(n<sup>3</sup>)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int64_t</span> &gt; mines;</span><br><span class="line">    <span class="keyword">int</span> _N;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; _mines)</span> </span>&#123;</span><br><span class="line">        _N = N;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">zeros</span><span class="params">(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v: _mines) &#123;</span><br><span class="line">            zeros[v[<span class="number">0</span>]][v[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans != <span class="number">0</span> &amp;&amp; (!valid(i - ans + <span class="number">1</span>, j) || !valid(i + ans - <span class="number">1</span>, j) || !valid(i, j - ans + <span class="number">1</span>) || !valid(i, j + ans - <span class="number">1</span>)))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; ; k++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> l = k - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!valid(i - l, j) || zeros[i - l][j]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!valid(i + l, j) || zeros[i + l][j]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!valid(i, j - l) || zeros[i][j - l]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!valid(i, j + l) || zeros[i][j + l]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ans = max(ans, k);</span><br><span class="line">                    <span class="keyword">if</span> (N % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; ans * <span class="number">2</span> == N) &#123;</span><br><span class="line">                        <span class="keyword">return</span> ans;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (N % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; ans * <span class="number">2</span> - <span class="number">1</span> == N) &#123;</span><br><span class="line">                        <span class="keyword">return</span> ans;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">valid</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; _N &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; _N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="dp">DP</h2><p>用四次二维DP，分别找到每个点的上下左右四个方向的最长的连续1的个数，然后对每一个点从这四个长度中选择最小值，就是该点的最大+大小。时间复杂度O(n<sup>2</sup>)。</p><p>要注意这个方法很容易超内存，所以我不得已把三维数组改成了二位数组循环利用四次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int32_t</span> &gt; mines;</span><br><span class="line">    <span class="keyword">int</span> _N;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; _mines)</span> </span>&#123;</span><br><span class="line">        _N = N;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : _mines) &#123;</span><br><span class="line">            mines.insert((<span class="keyword">int32_t</span>)v[<span class="number">0</span>] &lt;&lt; <span class="number">16</span> | (<span class="keyword">int32_t</span>)v[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">len</span><span class="params">(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, INT_MAX))</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMine(i, <span class="number">0</span>)) &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                len[i][<span class="number">0</span>] = min(len[i][<span class="number">0</span>], dp[i][<span class="number">0</span>]);</span><br><span class="line">                ans = max(ans, len[i][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isMine(i, j))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                len[i][j] = min(len[i][j], dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dp.assign(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMine(<span class="number">0</span>, i)) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">                len[<span class="number">0</span>][i] = min(len[<span class="number">0</span>][i], dp[<span class="number">0</span>][i]);</span><br><span class="line">                ans = max(ans, len[<span class="number">0</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isMine(i, j))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                len[i][j] = min(len[i][j], dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dp.assign(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMine(N - <span class="number">1</span>, i)) &#123;</span><br><span class="line">                dp[N - <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">                len[N - <span class="number">1</span>][i] = min(len[N - <span class="number">1</span>][i], dp[N - <span class="number">1</span>][i]);</span><br><span class="line">                ans = max(ans, len[N - <span class="number">1</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = N - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isMine(i, j))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                len[i][j] = min(len[i][j], dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dp.assign(N, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMine(i, N - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][N - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                len[i][N - <span class="number">1</span>] = min(len[i][N - <span class="number">1</span>], dp[i][N - <span class="number">1</span>]);</span><br><span class="line">                ans = max(ans, len[i][N - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = N - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isMine(i, j))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                dp[i][j] = dp[i][j + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                len[i][j] = min(len[i][j], dp[i][j]);</span><br><span class="line">                ans = max(ans, len[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMine</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">bool</span>)mines.count((<span class="keyword">int32_t</span>)x &lt;&lt; <span class="number">16</span> | (<span class="keyword">int32_t</span>)y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">valid</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; _N &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; _N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In a 2D &lt;code&gt;grid&lt;/code&gt; from (0, 0) to (N-1, N-1), every cell contains a &lt;code&gt;1&lt;/code&gt;, except those cells in the given list &lt;code&gt;mines&lt;/code&gt; which are &lt;code&gt;0&lt;/code&gt;. What is the largest axis-aligned plus sign of &lt;code&gt;1&lt;/code&gt;s contained in the grid? Return the order of the plus sign. If there is none, return 0.&lt;/p&gt;
&lt;p&gt;An “&lt;em&gt;axis-aligned plus sign of 1s&lt;/em&gt; of order &lt;strong&gt;k&lt;/strong&gt;” has some center &lt;code&gt;grid[x][y] = 1&lt;/code&gt; along with 4 arms of length &lt;code&gt;k-1&lt;/code&gt; going up, down, left, and right, and made of &lt;code&gt;1&lt;/code&gt;s. This is demonstrated in the diagrams below. Note that there could be &lt;code&gt;0&lt;/code&gt;s or &lt;code&gt;1&lt;/code&gt;s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples of Axis-Aligned Plus Signs of Order k:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Order 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;010&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Order 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Order 3:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0001000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0001000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0111110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0001000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0001000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: N &amp;#x3D; 5, mines &amp;#x3D; [[4, 2]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11011&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: N &amp;#x3D; 2, mines &amp;#x3D; []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;There is no plus sign of order 2, but there is of order 1.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: N &amp;#x3D; 1, mines &amp;#x3D; [[0, 0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;There is no plus sign, so return 0.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; will be an integer in the range &lt;code&gt;[1, 500]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mines&lt;/code&gt; will have length at most &lt;code&gt;5000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mines[i]&lt;/code&gt; will be length 2 and consist of integers in the range &lt;code&gt;[0, N-1]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="动态规划" scheme="http://blog.xiadong.info/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 763. Partition Labels</title>
    <link href="http://blog.xiadong.info/2018/01/14/LeetCode-763-Partition-Labels/"/>
    <id>http://blog.xiadong.info/2018/01/14/LeetCode-763-Partition-Labels/</id>
    <published>2018-01-14T10:48:36.000Z</published>
    <updated>2020-05-01T04:19:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>A string <code>S</code> of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: S &#x3D; &quot;ababcbacadefegdehijhklij&quot;</span><br><span class="line">Output: [9,7,8]</span><br><span class="line">Explanation:</span><br><span class="line">The partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.</span><br><span class="line">This is a partition so that each letter appears in at most one part.</span><br><span class="line">A partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits S into less parts.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>S</code> will have length in range <code>[1, 500]</code>.</li><li><code>S</code> will consist of lowercase letters (<code>'a'</code> to <code>'z'</code>) only.</li></ol><a id="more"></a><p>从前往后和从后往前遍历一遍数组，对于每一个元素，记录它之前（含自己）和之后（含自己）每个字符出现的个数。然后再遍历一次，每一个字符都没有在某下标之前和之后都出现，那么这个下标就可以用来分割。注意结尾的corner case。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; front, back;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = S[i];</span><br><span class="line">            v[ch - <span class="string">'a'</span>]++;</span><br><span class="line">            front.push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v.assign(<span class="number">26</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = S.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = S[i];</span><br><span class="line">            v[ch - <span class="string">'a'</span>]++;</span><br><span class="line">            back.push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverse(back.begin(), back.end());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(front[i][j] == <span class="number">0</span> || back[i + <span class="number">1</span>][j] == <span class="number">0</span>)) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                ans.push_back(i + <span class="number">1</span> - prev);</span><br><span class="line">                prev = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev != S.length()) &#123;</span><br><span class="line">            ans.push_back(S.length() - prev);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A string &lt;code&gt;S&lt;/code&gt; of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: S &amp;#x3D; &amp;quot;ababcbacadefegdehijhklij&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [9,7,8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The partition is &amp;quot;ababcbaca&amp;quot;, &amp;quot;defegde&amp;quot;, &amp;quot;hijhklij&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is a partition so that each letter appears in at most one part.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A partition like &amp;quot;ababcbacadefegde&amp;quot;, &amp;quot;hijhklij&amp;quot; is incorrect, because it splits S into less parts.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; will have length in range &lt;code&gt;[1, 500]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; will consist of lowercase letters (&lt;code&gt;&#39;a&#39;&lt;/code&gt; to &lt;code&gt;&#39;z&#39;&lt;/code&gt;) only.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.xiadong.info/tags/LeetCode/"/>
    
      <category term="CPP" scheme="http://blog.xiadong.info/tags/CPP/"/>
    
      <category term="动态规划" scheme="http://blog.xiadong.info/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="算法" scheme="http://blog.xiadong.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
